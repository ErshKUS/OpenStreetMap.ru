#!/usr/bin/env python
# -*- coding: utf8 -*-

# search osm
# ErshKUS

from sphinxapi import *
import cgi, sys, json, re
import psycopg2
import db_config

host = 'localhost'
port = 3312
sphinxindex = 'ershkus_search_addr, ershkus_poi'
#sphinxindex = 'ershkus_poi'
#sphinxindex = 'ershkus_search_addr'
listAddrType=['city','district','region']
countlistAddrType=2
q = ''
q2 = ''

mode=SPH_MATCH_EXTENDED2
lat = 0
lon = 0

output={}
output['ver']='0.6'

def main():
  def ifresult(res):
    if not res:
      output['error']='query failed: %s' % cl.GetLastError()
      return 11
    if cl.GetLastWarning():
      output['error']='WARNING: %s\n' % cl.GetLastWarning()
      return 12
    if not res['total_found']:
      return 1
    return 2
    
  def regeo(addrType):
  
    conn = psycopg2.connect(host=db_config.addr_host, database=db_config.addr_database, user=db_config.addr_user, password=db_config.addr_password)
    cur = conn.cursor()
    execute = """
      SELECT region_id, district_id, city_id
      FROM ershkus_search_addr_p
      WHERE
        (geom && (ST_GeomFromText('POINT(%(lon)s %(lat)s)',4326))) AND ST_Covers(geom, (ST_GeomFromText('POINT(%(lon)s %(lat)s)',4326)))
        AND (full_name is not null AND full_name <> '')
        AND addr_type='%(addrType)s'
    """ % {"lat":lat, "lon":lon, "addrType":addrType}
    cur.execute(execute)
    regeo=cur.fetchone()
    return regeo
    
  print "Content-type: text/javascript; Charset=Utf-8\nAccess-Control-Allow-Origin: *\n" # debug
  #print "Content-type: application/json; Charset=Utf-8\nAccess-Control-Allow-Origin: *\n" # production
  q = unicode(getvalues.getfirst("q",""),'utf8')
  lat = float(getvalues.getfirst("lat","0"))
  lon = float(getvalues.getfirst("lon","0"))
  asis = bool(getvalues.getfirst("asis",""))
  nolimit = bool(getvalues.getfirst("nolimit",""))
  cnt = int(getvalues.getfirst("cnt","12"))
  output['search']=q
  if not asis :
    output['search'] = output['search'].replace('&','&amp;')
    output['search'] = output['search'].replace('\"',"&quot;")
    output['search'] = output['search'].replace('\'','&#039;')
    output['search'] = output['search'].replace('<','&lt;')
    output['search'] = output['search'].replace('>','&gt;')
  if not q:
    output['error']="no query words, 'q' is empty"
    return
  
  
  cl = SphinxClient()
  cl.SetServer ( host, port )
  cl.SetMatchMode ( mode )
  
  #cl.SetRankingMode(SPH_RANK_SPH04)
  
  if (lat and lon):
    cl.SetGeoAnchor("lat", "lon", lat, lon)
    cl.SetSortMode ( SPH_SORT_EXTENDED, 'addr_type_id asc @weight desc @geodist ASC' )
    #cl.SetSortMode ( SPH_SORT_EXPR, '@weight/@geodist' )
  else:
    cl.SetSortMode ( SPH_SORT_EXTENDED, 'addr_type_id asc @weight desc' )
  
  #cl.SetFilterRange('@relevance', 10, 10000)
  #cl.SetSelect ( "*, @expr AS myweight" )
  
  if (cnt and (not nolimit)):
    cl.SetLimits ( 0, cnt, max(cnt,1000) )
  
  q = q.replace("/","\/")

  def search():
    resQ=1
    if (lat and lon):
      for xAddrType in listAddrType:
        q2 = regeo(xAddrType)
        if q2 == None:
          continue
        i=countlistAddrType
        cl.ResetOnlyFilter()
        for n in q2:
          if n <> None:
            cl.SetFilter(listAddrType[i]+'_id',[n])
          i=i-1
        res = cl.Query(q, sphinxindex)
        resQ=ifresult(res)
        if resQ > 10:
          return {'ret':False, 'res':res, 'error':True}
        if resQ == 2:
          break
    
    if resQ == 1:
      cl.ResetOnlyFilter()
      res = cl.Query(q, sphinxindex)
      resQ2 = ifresult(res)
      if resQ2 > 10:
        output['find']=False
        return {'ret':False, 'res':res, 'error':True}
      if resQ2 == 1:
        output['find']=False
        return {'ret':False, 'res':res, 'error':False}
    
    return {'ret':True,'res':res, 'error':False}

    
  output['find']=False
  retdata = search()
  if retdata['ret']:
    res=retdata['res']
  else:
    if retdata['error']:
      return
    else:
      q = ' ' + q + ' '
      q=re.sub(u'(\d+)[ -]+([А-Яа-я][\s,.])', r'\1\2', q) # 10 А => 10А, 10-А => 10А
      retdata = search()
      if retdata['ret']:
        res=retdata['res']
      else:
        if retdata['error']:
          return
        else:
          q = ' ' + q + ' '
          q=re.sub(u'\d{6}', r'', q) # 123456 => NULL
          retdata = search()
          if retdata['ret']:
            res=retdata['res']
          else:
            return
          
  
  
  if res.has_key('matches'):
    output['find']=True
    outputdata=[]
    #weight_min=(res['matches'][0]['weight']-100)
    addr_type_min = output['deb']=res['matches'][0]['attrs']['addr_type_id']
    for match in res['matches']:
      if (match['attrs']['addr_type_id']<=addr_type_min):
        outputlen=match['attrs']
        outputlen['id']=match['id']
        outputlen['weight']=match['weight']
        if not asis :
          outputlen['display_name'] = outputlen['display_name'].replace('&','&amp;')
          outputlen['display_name'] = outputlen['display_name'].replace('\"',"&quot;")
          outputlen['display_name'] = outputlen['display_name'].replace('\'','&#039;')
          outputlen['display_name'] = outputlen['display_name'].replace('<','&lt;')
          outputlen['display_name'] = outputlen['display_name'].replace('>','&gt;')
        outputdata.append(outputlen)
      
  output['matches']=outputdata

getvalues=cgi.FieldStorage()
outCallback = getvalues.getfirst('callback','')

main()

if (outCallback == ""):
  print json.dumps(output)
else:
  print outCallback + "(" + json.dumps(output) + ");"
