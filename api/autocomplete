#!/usr/bin/env python
# -*- coding: utf8 -*-

# search osm
# ErshKUS

from sphinxapi import *
import cgi, sys, json
import psycopg2
import db_config

host = 'localhost'
port = 3312
#sphinxindex = 'ershkus_search_addr, ershkus_poi'
#sphinxindex = 'ershkus_poi'
sphinxindex = 'ershkus_search_auto'
listAddrType=['city','district','region']
countlistAddrType=2
q = ''
q2 = ''

mode=SPH_MATCH_EXTENDED2
lat = 0
lon = 0

output={}
output['ver']='0.6'

def main():
  def ifresult(res):
    if not res:
      output['error']='query failed: %s' % cl.GetLastError()
      return 11
    if cl.GetLastWarning():
      output['error']='WARNING: %s\n' % cl.GetLastWarning()
      return 12
    if not res['total_found']:
      return 1
    return 2
    
  # def regeo(addrType):
  
  #   conn = psycopg2.connect(host=db_config.addr_host, database=db_config.addr_database, user=db_config.addr_user, password=db_config.addr_password)
  #   cur = conn.cursor()
  #   execute = """
  #     SELECT region_id, district_id, city_id
  #     FROM ershkus_search_addr
  #     WHERE
  #       (geom && (ST_GeomFromText('POINT(%(lon)s %(lat)s)',4326))) AND ST_Covers(geom, (ST_GeomFromText('POINT(%(lon)s %(lat)s)',4326)))
  #       AND (full_name is not null AND full_name <> '')
  #       AND addr_type='%(addrType)s'
  #   """ % {"lat":lat, "lon":lon, "addrType":addrType}
  #   cur.execute(execute)
  #   regeo=cur.fetchone()
  #   return regeo
    
  print "Content-type: text/javascript; Charset=Utf-8\nAccess-Control-Allow-Origin: *\n" # debug
  #print "Content-type: application/json; Charset=Utf-8\nAccess-Control-Allow-Origin: *\n" # production
  q = getvalues.getfirst("q","")
  lat = float(getvalues.getfirst("lat","0"))
  lon = float(getvalues.getfirst("lon","0"))
  asis = bool(getvalues.getfirst("asis",""))
  nolimit = bool(getvalues.getfirst("nolimit",""))
  cnt = int(getvalues.getfirst("cnt","12"))
  output['search']=q
  if not asis :
    output['search'] = output['search'].replace('&','&amp;')
    output['search'] = output['search'].replace('\"',"&quot;")
    output['search'] = output['search'].replace('\'','&#039;')
    output['search'] = output['search'].replace('<','&lt;')
    output['search'] = output['search'].replace('>','&gt;')
  if not q:
    output['error']="no query words, 'q' is empty"
    return
  
  
  cl = SphinxClient()
  cl.SetServer ( host, port )
  cl.SetMatchMode ( mode )
  
  #cl.SetRankingMode(SPH_RANK_SPH04)
  
  cl.SetSortMode ( SPH_SORT_EXTENDED, 'addr_type_id asc @weight desc' )
  
  #cl.SetFilterRange('@relevance', 10, 10000)
  #cl.SetSelect ( "*, @expr AS myweight" )
  
  cnt = 20
  if (cnt and (not nolimit)):
    cl.SetLimits ( 0, cnt, max(cnt,1000) )
  
  q = q.replace("-"," \-")
  q = q.replace("/","\/")

  def prepare_query(q):
    words = q.split()
    words[-1] = words[-1] + '*'
    in_name = " | ".join(words)
    other = " ".join(words)
    return other + ' @name ' + in_name
 
  cl.ResetOnlyFilter()
  res = cl.Query(prepare_query(q), sphinxindex)
  resQ2 = ifresult(res)
  if resQ2 > 10:
    return
  if resQ2 == 1:
    output['find']=False
    return
  
  def clean_str(s):
    s = s.replace('&','&amp;')
    s = s.replace('\"',"&quot;")
    s = s.replace('\'','&#039;')
    s = s.replace('<','&lt;')
    s = s.replace('>','&gt;')
    return s

  if res.has_key('matches'):
    output['find']=True
    outputdata=[]
    # weight_min=(res['matches'][0]['weight']-100)
    was_before = set()

    for match in res['matches']:
      # if (match['weight']>weight_min) :
        outputlen=match['attrs']
        outputlen['id']=match['id']
        outputlen['weight']=match['weight']
        # if not asis :
        #   outputlen['display_name'] = clean_str(outputlen['display_name'])
        # outputlen = {}
        index_name = match['attrs']['index_name'].decode('utf8')
        if index_name in was_before:continue
        was_before.add(index_name)
        if not index_name: continue

        ind = index_name.find(',')
        if ind != -1:
          short_name = index_name[:ind]
          other_name = index_name[ind+1:]
        else:
          short_name = index_name
          other_name = ""
        outputlen['short_name'] = short_name.encode('utf8')
        outputlen['other_name'] = other_name.encode('utf8')
        outputdata.append(outputlen)
      
  output['matches']=outputdata[:10]

getvalues=cgi.FieldStorage()
outCallback = getvalues.getfirst('callback','')

main()

if (outCallback == ""):
  print json.dumps(output)
else:
  print outCallback + "(" + json.dumps(output) + ");"
